// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MoviesAspTest.Models;

namespace MoviesAspTest.Migrations
{
    [DbContext(typeof(MoviesActorsContext))]
    [Migration("20210723000431_CreateDatabase")]
    partial class CreateDatabase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MoviesAspTest.Models.Actor", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("nchar(512)")
                        .IsFixedLength(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasDefaultValueSql("('ACTOR_NAME')");

                    b.HasKey("Id");

                    b.ToTable("Actor");
                });

            modelBuilder.Entity("MoviesAspTest.Models.ActorLike", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ActorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "ActorId");

                    b.HasIndex("ActorId");

                    b.ToTable("ActorLike");
                });

            modelBuilder.Entity("MoviesAspTest.Models.ActorParticipation", b =>
                {
                    b.Property<Guid>("MovieId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ActorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MovieId", "ActorId");

                    b.HasIndex("ActorId");

                    b.ToTable("ActorParticipation");
                });

            modelBuilder.Entity("MoviesAspTest.Models.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasDefaultValueSql("('GENRE_NAME')");

                    b.HasKey("Id");

                    b.ToTable("Genre");
                });

            modelBuilder.Entity("MoviesAspTest.Models.Movie", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<TimeSpan?>("Duration")
                        .HasColumnType("time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasDefaultValueSql("('MOVIE_NAME')");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.ToTable("Movie");
                });

            modelBuilder.Entity("MoviesAspTest.Models.MovieGenreJunction", b =>
                {
                    b.Property<Guid>("MovieId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MovieId", "GenreId");

                    b.ToTable("MovieGenreJunction");
                });

            modelBuilder.Entity("MoviesAspTest.Models.MovieLike", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MovieId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "MovieId");

                    b.HasIndex("MovieId");

                    b.ToTable("MovieLike");
                });

            modelBuilder.Entity("MoviesAspTest.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SignIn")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("MoviesAspTest.Models.ActorLike", b =>
                {
                    b.HasOne("MoviesAspTest.Models.Actor", "Actor")
                        .WithMany("ActorLikes")
                        .HasForeignKey("ActorId")
                        .HasConstraintName("FK_ActorLike_Actor")
                        .IsRequired();

                    b.HasOne("MoviesAspTest.Models.User", "User")
                        .WithMany("ActorLikes")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_ActorLike_User")
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MoviesAspTest.Models.ActorParticipation", b =>
                {
                    b.HasOne("MoviesAspTest.Models.Actor", "Actor")
                        .WithMany("ActorParticipations")
                        .HasForeignKey("ActorId")
                        .HasConstraintName("FK_ActorParticipation_Actor")
                        .IsRequired();

                    b.HasOne("MoviesAspTest.Models.Movie", "Movie")
                        .WithMany("ActorParticipations")
                        .HasForeignKey("MovieId")
                        .HasConstraintName("FK_ActorParticipation_Movie")
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("MoviesAspTest.Models.MovieLike", b =>
                {
                    b.HasOne("MoviesAspTest.Models.Movie", "Movie")
                        .WithMany("MovieLikes")
                        .HasForeignKey("MovieId")
                        .HasConstraintName("FK_MovieLike_Movie")
                        .IsRequired();

                    b.HasOne("MoviesAspTest.Models.User", "User")
                        .WithMany("MovieLikes")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_MovieLike_User")
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MoviesAspTest.Models.Actor", b =>
                {
                    b.Navigation("ActorLikes");

                    b.Navigation("ActorParticipations");
                });

            modelBuilder.Entity("MoviesAspTest.Models.Movie", b =>
                {
                    b.Navigation("ActorParticipations");

                    b.Navigation("MovieLikes");
                });

            modelBuilder.Entity("MoviesAspTest.Models.User", b =>
                {
                    b.Navigation("ActorLikes");

                    b.Navigation("MovieLikes");
                });
#pragma warning restore 612, 618
        }
    }
}
